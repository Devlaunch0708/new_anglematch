// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  FOUNDER
  INVESTOR
  ADMIN
}

model User {
  id                 String        @id @default(cuid())
  name               String
  email              String        @unique
  role               UserRole      @default(FOUNDER)
  verificationStatus String        @default("PENDING") // PENDING, APPROVED, REJECTED
  password           String
  verification       Verification?
  startup            Startup?
  investor           Investor?
  createdAt          DateTime      @default(now())
  pitches            Pitch[]
  interactions       Interaction[] @relation("UserInteractions")
}

model Verification {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  documents   Json // Stores Supabase Storage paths
  status      String    @default("PENDING") // PENDING, APPROVED, REJECTED
  notes       String?
  submittedAt DateTime  @default(now())
  reviewedAt  DateTime?
}

model Startup {
  id          String   @id @default(cuid())
  name        String
  description String
  website     String?
  industry    String
  stage       String?
  fundingGoal Float
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Match       Match[]
}

model Investor {
  id              String   @id @default(cuid())
  name            String
  bio             String
  focusAreas      String[]
  investmentRange String
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Match           Match[]
}

model Match {
  id         String   @id @default(cuid())
  startupId  String
  investorId String
  status     String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  matchScore Float
  startup    Startup  @relation(fields: [startupId], references: [id])
  investor   Investor @relation(fields: [investorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([startupId, investorId])
}

model Interaction {
  id        String   @id @default(uuid())
  pitchId   String
  pitch     Pitch    @relation("PitchInteractions", fields: [pitchId], references: [id])
  userId    String
  user      User     @relation("UserInteractions", fields: [userId], references: [id])
  type      String // INVESTOR_TO_STARTUP, STARTUP_TO_INVESTOR
  status    String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt DateTime @default(now())
}

model Pitch {
  id           String        @id @default(uuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  title        String
  description  String
  deckUrl      String? // Supabase Storage path
  solutionUrl  String?
  marketSize   String?
  traction     String?
  status       String        @default("DRAFT") // DRAFT, PUBLISHED
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  interactions Interaction[] @relation("PitchInteractions")
}
